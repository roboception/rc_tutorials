.. include:: ../global_rst.glb

.. _itempick-bin-picking-no-robot:

Configuring ItemPick for bin picking
======================================

This tutorial shows how to configure the |itempick| module to work in a bin-picking
application. More specifically, the bin (or so-called Load Carrier)
is configured in |itempick| and detected in the scene, in order to compute grasps only for items
inside the bin itself.

The tutorial covers all the steps from configuration of a load carrier up to getting grasps for
items inside the load carrier. For this, we will call the
:ref:`ItemPick services<sect-itempick-services>` using the |rcvisard|'s :ref:`sect-rest-api`.
This can be done in :ref:`sect-swagger-ui`, in command lines or scripts using
`curl <https://curl.haxx.se/>`_, and programmatically using a client library
(e.g. from a robot controller). Here we focus on the first two options.

.. _itempick-bin-picking-no-robot-before:

Before we start
---------------

This tutorials assumes that the previous tutorial :ref:`itempick-getting-started` has
been completed.

In order to go through this tutorial, a bin or so-called load carrier should be available
(see :ref:`general-lc-config`).

.. _itempick-bin-picking-no-robot-setup:

Setting up the scene
--------------------

The load carrier should be placed in the field of view of the sensor.
Optimally, the sensor should have a clear view onto all objects in the bin
without any occlusion by its walls -- as shown in the sample setup below.

.. _fig-itempick-bin-picking-setup:
.. figure:: ../images/itempick/bin_picking_setup.jpg
  :width: 500px
  :align: center

  Sample setup. The |rcvisard| 160 is mounted on static support above the load carrier,
  approximately 1.15 m away from the bin.

The placement should also ensure that the rim of of the load carrier is visible in the depth image.
Small occlusions of the rim are acceptable, as long as all edges are at least partially visible.
If this is not the case, one can follow the recommendations for
:ref:`tuning camera and image parameters <general-tuning-image-parameters>`.

.. _itempick-bin-picking-no-robot-configure:

Configuring the load carrier
----------------------------

The configuration of the load carrier is described in detail in :ref:`general-lc-config`.

Detecting the load carrier
--------------------------

After the load carrier has been configured, it is important to check that |itempick| can
detect the load carrier in the scene.
The |webgui|'s :menuselection:`Modules --> ItemPick` page offers a *Try Out* section
for this purpose. One simply needs to specify the respective load carrier ID and hit the
:guilabel:`Detect Grasp Points` button.
As for the |restapi|, |itempick| offers a
:ref:`detect_load_carriers<expl-itempick-srv-detect-lc>` service to
trigger such detections.

.. toggle-header::
 :header: **REST-API request for detecting my-load-carrier1**

  .. tabs::

    .. group-tab:: REST-API

      To trigger the ``detect_load_carriers`` service via the REST-API, one needs to send
      a PUT request to the URL
      ``http://<rc-visard-ip>/api/v1/nodes/rc_itempick/services/detect_load_carriers``,
      where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.

      The PUT body should include the following data, in JSON:

      .. code-block:: json

        {
          "args": {
            "pose_frame": "camera",
            "load_carrier_ids": [
                "my-load-carrier1"
            ]
          }
        }

    .. group-tab:: Swagger UI

      #. The Swagger UI for putting a service request is located at
         ``http://<rc_visard_ip>/api/swagger/index.html#!/nodes/put_nodes_node_services_service``,
         where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.
      #. The following values are required to fill the request to the REST-API:

          * **node** ``rc_itempick``
          * **service** ``detect_load_carriers``
          * **service args**
              .. code-block:: json

                {
                  "args": {
                    "pose_frame": "camera",
                    "load_carrier_ids": [
                        "my-load-carrier1"
                    ]
                  }
                }

    .. group-tab:: curl (Linux)

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``RC_VISARD_IP=10.0.2.90``).

      .. code-block:: bash

        curl -X PUT "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/detect_load_carriers" -H  "accept: application/json" -H  "Content-Type: application/json" -d \
        "{  \
          \"args\": { \
            \"pose_frame\": \"camera\", \
            \"load_carrier_ids\": [ \
              \"my-load-carrier1\" \
            ] \
          } \
        }"

    .. group-tab:: curl (Windows)

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``set "RC_VISARD_IP=10.0.2.90"``) and the *curl* command is in the path.


      .. code-block:: bash

        curl.exe -X PUT "http://%RC_VISARD_IP%/api/v1/nodes/rc_itempick/services/detect_load_carriers" -H  "accept: application/json" -H  "Content-Type: application/json" -d ^
        "{  ^
          \"args\": { ^
            \"pose_frame\": \"camera\", ^
            \"load_carrier_ids\": [ ^
              \"my-load-carrier1\" ^
            ] ^
          } ^
        }"

    .. group-tab:: PowerShell

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``$RC_VISARD_IP="10.0.2.90"``).

      .. code-block:: bash

        Invoke-RestMethod "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/detect_load_carriers" -ContentType 'application/json' -Method Put -Body '
        {
          "args": {
            "pose_frame": "camera",
            "load_carrier_ids": [
                "my-load-carrier1"
            ]
          }
        }' | ConvertTo-Json -Depth 6


Detection results -- no matter whether triggered via |webgui| or |restapi| -- are visualized
in the |webgui|'s :menuselection:`Modules --> ItemPick` page as *Load Carriers* image.
Sample detection results for *my-load-carrier1* are shown below.
The detected load carrier is colored in blue, while its content is highlighted in green
if inside the load carrier and in red if above the rim (overfill).

.. figure:: ../images/itempick/load_carriers_detected.png
  :width: 600px
  :align: center

  Detection result for *my-load-carrier1* without overfill (left) and with overfill (right).

.. note::
  While the ``detect_load_carriers`` service supports a list of ``load_carrier_ids``
  as input argument, the current implementation only accepts one load carrier ID
  in the list.

.. note::
  All points that are not colored in the load carrier visualization image are not
  used for grasp computation. This can happen if the depth image includes missing
  data or if the items stick out of the bin by more than 10 cm.

.. TODO description of load carrier orientation

.. _itempick-bin-picking-no-robot-computing-grasps:

Computing grasps inside a load carrier
--------------------------------------

Once the load carrier is configured and detectable in the scene, |itempick| can be used to
compute grasps only for objects that are inside the bin.

To this purpose, the additional argument ``load_carrier_id`` should be added to the request to
the REST-API for the ``compute_grasps`` service. As explained before, this is also possible in
the *Try Out* section of the |webgui|'s :menuselection:`Modules --> ItemPick` page.

.. toggle-header::
  :header: **Request to the REST-API for getting grasps inside my-load-carrier1**

   .. tabs::

    .. group-tab:: REST-API

      To trigger the ``compute_grasp`` service via the REST-API, one needs to send
      a PUT request to the URL
      ``http://<rc-visard-ip>/api/v1/nodes/rc_itempick/services/compute_grasp``,
      where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.

      The PUT body should include the following data, in JSON:

      .. code-block:: json

        {
          "args": {
            "pose_frame": "camera",
            "load_carrier_id": "my-load-carrier1",
            "suction_surface_length": 0.02,
            "suction_surface_width": 0.02
          }
        }

    .. group-tab:: Swagger UI

      #. The Swagger UI for putting a service request is located at
         ``http://<rc_visard_ip>/api/swagger/index.html#!/nodes/put_nodes_node_services_service``,
         where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.
      #. The following values are required to fill the request to the REST-API:

          * **node** ``rc_itempick``
          * **service** ``compute_grasps``
          * **service args**
              .. code-block:: json

                {
                  "args": {
                    "pose_frame": "camera",
                    "load_carrier_id": "my-load-carrier1",
                    "suction_surface_length": 0.02,
                    "suction_surface_width": 0.02
                  }
                }

    .. group-tab:: curl (Linux)

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``RC_VISARD_IP=10.0.2.90``).

      .. code-block:: bash

        curl -X PUT "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d \
        "{ \
            \"args\": { \
                \"pose_frame\": \"camera\", \
                \"load_carrier_id\": \"my-load-carrier1\", \
                \"suction_surface_length\": 0.02, \
                \"suction_surface_width\": 0.02 \
            } \
        }"

    .. group-tab:: curl (Windows)

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``set RC_VISARD_IP=10.0.2.90``) and the *curl* command is in the path.

      .. code-block:: bash

        curl.exe -X PUT "http://%RC_VISARD_IP%/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d ^
        "{ ^
            \"args\": { ^
                \"pose_frame\": \"camera\", ^
                \"load_carrier_id\": \"my-load-carrier1\", ^
                \"suction_surface_length\": 0.02, ^
                \"suction_surface_width\": 0.02 ^
            } ^
        }"

    .. group-tab:: PowerShell

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``$RC_VISARD_IP="10.0.2.90"``).

      .. code-block:: bash

        Invoke-RestMethod "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -ContentType 'application/json' -Method Put -Body '
        {
          "args": {
            "pose_frame": "camera",
            "load_carrier_id": "my-load-carrier1",
            "suction_surface_length": 0.02,
            "suction_surface_width": 0.02
          }
        }' | ConvertTo-Json -Depth 6


Computing collision free grasps
--------------------------------------

The :ref:`collision_check_getting_started` tutorial shows how to integrate |itempick|
with the |collision| module.
When the collision checking is enabled, all detected grasp points are checked
for collisions between the gripper geometry and the load carrier.

.. note::
  The x axis of a grasp computed by |itempick| corresponds to the longest
  axis of the :ref:`grasp ellipse<fig-itempick-grasp-surface>`.
  When configuring a gripper in the |collision| module,
  the x axis of the gripper should be set along the longest gripper elongation,
  in order to match the orientation of the computed grasps.

.. toggle-header::
  :header: **Request to the REST-API for getting collision free grasps inside my-load-carrier1 with gripper my-gripper**

   .. tabs::

    .. group-tab:: REST-API

      To trigger the ``compute_grasp`` service via the REST-API, one needs to send
      a PUT request to the URL
      ``http://<rc-visard-ip>/api/v1/nodes/rc_itempick/services/compute_grasp``,
      where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.

      The PUT body should include the following data, in JSON:

      .. code-block:: json

        {
          "args": {
            "pose_frame": "camera",
            "load_carrier_id": "my-load-carrier1",
            "suction_surface_length": 0.02,
            "suction_surface_width": 0.02,
            "collision_detection": {
              "gripper_id": "my-gripper"
            }
          }
        }

    .. group-tab:: Swagger UI

      #. The Swagger UI for putting a service request is located at
         ``http://<rc_visard_ip>/api/swagger/index.html#!/nodes/put_nodes_node_services_service``,
         where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.
      #. The following values are required to fill the request to the REST-API:

          * **node** ``rc_itempick``
          * **service** ``compute_grasps``
          * **service args**
              .. code-block:: json

                {
                  "args": {
                    "pose_frame": "camera",
                    "load_carrier_id": "my-load-carrier1",
                    "suction_surface_length": 0.02,
                    "suction_surface_width": 0.02,
                    "collision_detection": {
                      "gripper_id": "my-gripper"
                    }
                  }
                }

    .. group-tab:: curl (Linux)

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``RC_VISARD_IP=10.0.2.90``).

      .. code-block:: bash

        curl -X PUT "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d \
        "{ \
            \"args\": { \
                \"pose_frame\": \"camera\", \
                \"load_carrier_id\": \"my-load-carrier1\", \
                \"suction_surface_length\": 0.02, \
                \"suction_surface_width\": 0.02, \
                \"collision_detection\": {  \
                  \"gripper_id\": \"my-gripper\" \
                } \
            } \
        }"

    .. group-tab:: curl (Windows)

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``set RC_VISARD_IP=10.0.2.90``) and the *curl* command is in the path.

      .. code-block:: bash

        curl.exe -X PUT "http://%RC_VISARD_IP%/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d ^
        "{ ^
            \"args\": { ^
                \"pose_frame\": \"camera\", ^
                \"load_carrier_id\": \"my-load-carrier1\", ^
                \"suction_surface_length\": 0.02, ^
                \"suction_surface_width\": 0.02, ^
                \"collision_detection\": { ^
                  \"gripper_id\": \"my-gripper\" ^
                } ^
            } ^
        }"

    .. group-tab:: PowerShell

      The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
      |rcvisard| (e.g. ``$RC_VISARD_IP="10.0.2.90"``).

      .. code-block:: bash

        Invoke-RestMethod "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -ContentType 'application/json' -Method Put -Body '
        {
          "args": {
            "pose_frame": "camera",
            "load_carrier_id": "my-load-carrier1",
            "suction_surface_length": 0.02,
            "suction_surface_width": 0.02,
            "collision_detection": {
              "gripper_id": "my-gripper"
            }
          }
        }' | ConvertTo-Json -Depth 6

.. _itempick-bin-picking-no-robot-compartment:

Computing grasps inside a compartment in the load carrier
---------------------------------------------------------

In some cases it is desirable to select a compartment inside the load carrier and only get
grasps for items inside this compartment. The ``compute_grasps`` service includes an
optional argument ``load_carrier_compartment`` that can be used to this purpose.

.. note::
  The ``load_carrier_compartment`` argument can not be specified in the *Try Out* section of
  |webgui|'s :menuselection:`Modules --> ItemPick` page.

The compartment is a box whose ``pose`` is defined with respect to the load carrier reference frame.
In this section we show how to select the compartment in :numref:`fig-itempick-lc-compartment`.

.. _fig-itempick-lc-compartment:
.. figure:: ../images/itempick/load_carrier_compartment.png
  :width: 800px
  :align: center

  Sample compartment inside a load carrier. The coordinate system shown in the image is the
  load carrier reference frame.

The compartment box dimensions are computed from the load carrier inner dimensions:

.. math::

  \left(\frac{\text{inner_dimensions.x}}{2}, \text{inner_dimensions.y}, \text{inner_dimensions.z}\right)

The load carrier reference frame is located at the center of the load carrier outer box.
To move from the load carrier reference frame to the compartment center,
the following translation needs to be applied:

.. math::

  \left(\frac{\text{inner_dimensions.x}}{4}, 0, \frac{\text{outer_dimensions.z}-\text{inner_dimensions.z}}{2}\right)

Since the compartment volume is intersected with the load carrier inner volume, the box :math:`z`
dimension can also be set to the load carrier outer dimension, without applying any
translation along :math:`z`.

The code below shows how to place a ``compute_grasps`` request for items inside this compartment of
*my-load-carrier1*.

.. tabs::

  .. group-tab:: REST-API

    To trigger the ``compute_grasp`` service via the REST-API, one needs to send
    a PUT request to the URL
    ``http://<rc-visard-ip>/api/v1/nodes/rc_itempick/services/compute_grasp``,
    where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.

    The PUT body should include the following data, in JSON:

    .. code-block:: json

      {
        "args": {
          "pose_frame": "camera",
          "load_carrier_id": "my-load-carrier1",
          "load_carrier_compartment": {
            "box": {
              "x": 0.285,
              "y": 0.37,
              "z": 0.22
            },
            "pose": {
              "position": {
                "x": 0.1425,
                "y": 0,
                "z": 0
              },
              "orientation": {
                "x": 0,
                "y": 0,
                "z": 0,
                "w": 1
              }
            }
          },
          "suction_surface_length": 0.02,
          "suction_surface_width": 0.02
        }
      }

  .. group-tab:: Swagger UI

    #. The Swagger UI for putting a service request is located at
       ``http://<rc_visard_ip>/api/swagger/index.html#!/nodes/put_nodes_node_services_service``,
       where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.
    #. The following values are required to fill the request to the REST-API:

        * **node** ``rc_itempick``
        * **service** ``compute_grasps``
        * **service args**
            .. code-block:: json

              {
                "args": {
                  "pose_frame": "camera",
                  "load_carrier_id": "my-load-carrier1",
                  "load_carrier_compartment": {
                    "box": {
                      "x": 0.285,
                      "y": 0.37,
                      "z": 0.22
                    },
                    "pose": {
                      "position": {
                        "x": 0.1425,
                        "y": 0,
                        "z": 0
                      },
                      "orientation": {
                        "x": 0,
                        "y": 0,
                        "z": 0,
                        "w": 1
                      }
                    }
                  },
                  "suction_surface_length": 0.02,
                  "suction_surface_width": 0.02
                }
              }

  .. group-tab:: curl (Linux)

    The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
    |rcvisard| (e.g. ``RC_VISARD_IP=10.0.2.90``).

    .. code-block:: bash

      curl -X PUT "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d \
      "{ \
          \"args\": { \
              \"pose_frame\": \"camera\", \
              \"load_carrier_id\": \"my-load-carrier1\", \
              \"load_carrier_compartment\": { \
                \"box\": { \
                  \"x\": 0.285, \
                  \"y\": 0.37, \
                  \"z\": 0.22 \
                }, \
                \"pose\": { \
                  \"position\": { \
                    \"x\": 0.1425, \
                    \"y\": 0, \
                    \"z\": 0 \
                  }, \
                  \"orientation\": { \
                    \"x\": 0, \
                    \"y\": 0, \
                    \"z\": 0, \
                    \"w\": 1 \
                  } \
                } \
              }, \
              \"suction_surface_length\": 0.02, \
              \"suction_surface_width\": 0.02 \
          } \
      }"

  .. group-tab:: curl (Windows)

    The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
    |rcvisard| (e.g. ``set RC_VISARD_IP=10.0.2.90``) and the *curl* command is in the path.

    .. code-block:: bash

      curl.exe -X PUT "http://%RC_VISARD_IP%/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d ^
      "{ ^
          \"args\": { ^
              \"pose_frame\": \"camera\", ^
              \"load_carrier_id\": \"my-load-carrier1\", ^
              \"load_carrier_compartment\": { ^
                \"box\": { ^
                  \"x\": 0.285, ^
                  \"y\": 0.37, ^
                  \"z\": 0.22 ^
                }, ^
                \"pose\": { ^
                  \"position\": { ^
                    \"x\": 0.1425, ^
                    \"y\": 0, ^
                    \"z\": 0 ^
                  }, ^
                  \"orientation\": { ^
                    \"x\": 0, ^
                    \"y\": 0, ^
                    \"z\": 0, ^
                    \"w\": 1 ^
                  } ^
                } ^
              }, ^
              \"suction_surface_length\": 0.02, ^
              \"suction_surface_width\": 0.02 ^
          } ^
      }"

  .. group-tab:: PowerShell

    The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
    |rcvisard| (e.g. ``$RC_VISARD_IP="10.0.2.90"``).

    .. code-block:: bash

      Invoke-RestMethod "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -ContentType 'application/json' -Method Put -Body '
      {
        "args": {
          "pose_frame": "camera",
          "load_carrier_id": "my-load-carrier1",
          "load_carrier_compartment": {
            "box": {
              "x": 0.285,
              "y": 0.37,
              "z": 0.22
            },
            "pose": {
              "position": {
                "x": 0.1425,
                "y": 0,
                "z": 0
              },
              "orientation": {
                "x": 0,
                "y": 0,
                "z": 0,
                "w": 1
              }
            }
          },
          "suction_surface_length": 0.02,
          "suction_surface_width": 0.02
        }
      }' | ConvertTo-Json -Depth 6


Troubleshooting
---------------

* :ref:`The load carrier rim is not visible in the depth image<loadcarrier-faq-lc-rim-not-visible>`
* :ref:`The load carrier is not detected or not detected robustly<loadcarrier-faq-lc-not-detected>`
* :ref:`The load carrier is deformed or deformable<loadcarrier-faq-lc-deformed>`
* :ref:`The load carrier is not on a horizontal surface<loadcarrier-faq-lc-not-on-horizontal-surface>`
* :ref:`The load carrier floor is detected as load carrier content<loadcarrier-faq-grasps-on-lc-floor>`
* :ref:`Objects on the load carrier floor are not detected as load carrier content<loadcarrier-faq-no-grasps-on-lc-floor>`

.. Next steps
.. ----------

.. TODO integration with robot
