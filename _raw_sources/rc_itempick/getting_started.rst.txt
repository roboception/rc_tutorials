.. include:: ../global_rst.glb

.. _itempick-getting-started:

Getting started with ItemPick
=============================

This tutorial shows how to set up the |rcvisard| to start using the |itempick| component
and guides the reader to the computation of the first grasps.

.. _itempick-getting-started-before:

Before we start
---------------

In order to go through this tutorial, the following prerequisites should be met:

.. rubric:: The |rcvisard| is properly configured:

#. The |rc_visard|'s image version is at least 1.4 and
   the |rc_visard|'s license includes the |itempick| component.
   This can be verified on the :ref:`sect-web-gui`'s *System* panel.

.. rubric:: One or more workpieces have been selected. They should meet the following requisites:

#. The workpiece surface, shape and weight are suitable for picking by suction
   (i.e. the vacuum generated by the gripper system together with the size of the suction cup
   generate a suction force large enough to lift and move the workpiece).

#. The workpiece surface appears in the depth image.
   This can be verified by placing the workpiece in front of the |rcvisard| and checking the
   :ref:`sect-web-gui`'s *Depth image* panel.
   If the workpiece presents holes or low confidence regions
   (i.e. average gray pixels in the Confidence image),
   one can follow the :ref:`general-tuning-image-parmeters` tutorial.

#. |itempick| has a lower bound on the dimensions of the workpiece. This threshold is set to 300
   pixels in the depth image, which approximately corresponds to an object of size 0.04 m x 0.04 m
   at a distance of 1.2 m from the sensor.

.. _itempick-getting-started-setup:

Setting up the scene
--------------------

We recommend to mount the |rcvisard| on a tripod or a static support as explained
in the |rcvisard|'s :ref:`sect-mechanical` description.

Alternatively, the |rcvisard| can also be mounted on the end-effector of a robot, but
the integration with the robot is not included in this tutorial
(therefore, no hand-eye calbration is required to complete the tutorial).

.. note::
  The mounting should be stable such that the sensor remains static while |itempick| acquires data.

The workpieces to be grasped should be placed in the field of view of the |rcvisard|
(e.g. on a flat surface).
The optimal distance to the objects depends on the |rc_visard| model, as shown in the table below.

.. tabularcolumns:: |l|c|c|
.. csv-table:: |itempick|'s recommended working range.
	:header:  , Minimum distance, Maximum distance

	"|rcvisard| 160","0.5 m","1.3 m"
	"|rcvisard| 65","0.2 m","1.0 m"

Since the depth accuracy declines quadratically with an objectâ€™s distance from the sensor,
the |rc_visard| should be placed as close to the objects as possible.

.. figure:: ../images/itempick/getting_started_setup.jpg
  :width: 300px
  :align: center

  Sample setup. The |rcvisard| 160 is mounted on a tripod approximately 0.7 m away
  from the objects.

.. _itempick-getting-started-configure-image:

Configuring image parameters
----------------------------

Once the scene has been set up, we recommend to check the |webgui|'s *Depth image*
panel to verify that the images are well-exposed and the depth image is dense
with no holes on the workpieces.
The tutorial :ref:`general-tuning-image-parmeters` covers all required steps to
to get the best quality for stereo and depth images.

|itempick| provides its best results when the depth image quality is set to High.
The Static mode might be beneficial in static scene but it increases the data acquisition time.

.. _fig-itempick-getting-started-tuning-image:
.. figure:: ../images/itempick/getting_started_tuning_image.png
  :width: 70%
  :align: center

  Sample images from the setup shown above: left image (top left), confidence image (bottom left),
  and depth image (right).


.. _itempick-getting-started-first-grasps:

Computing the first grasps
--------------------------

The :ref:`compute_grasps<expl-itempick-srv-compute-grasps>` service of the |itempick| components
triggers the computation of suction grasps in the scene.

This section shows how to place a ``compute_grasps`` request to |itempick|
using the |rcvisard|'s :ref:`sect-rest-api`. This can be done in :ref:`sect-swagger-ui`,
in command lines or scripts using `curl <https://curl.haxx.se/>`_, and programmatically
using a client library (e.g. from the robot controller).
In this tutorial we focus on the first two options.

.. note::
  The ``compute_grasp`` can also be triggered in the ``Try Out`` section of the |webgui|'s *ItemPick* panel.
  The required arguments are pre-set with default values,
  therefore the service can directly be called by hitting the ``Detect`` button.

In the below examples, the service will be triggered with the minimum set of required arguments.
For this reason, the results might to be sub-optimal
(e.g. multiple grasps on a single workpiece, or grasps on unwanted objects).

The images in the top section of the |webgui|'s *ItemPick* panel show the results
of the last successful request to |itempick|.

.. tabs::

  .. group-tab:: REST-API
    
    To trigger the ``compute_grasp`` service via the REST-API, one needs to send
    a PUT request to the URL
    ``http://<rc-visard-ip>/api/v1/nodes/rc_itempick/services/compute_grasp``,
    where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.
    
    The PUT body should include the following data, in JSON:
    
    .. code-block:: json

      {
        "args": {
          "pose_frame": "camera",
          "suction_surface_length": 0.02,
          "suction_surface_width": 0.02
        }
      }
  
  .. group-tab:: Swagger UI

    #. The Swagger UI for putting a service request is located at
       ``http://<rc_visard_ip>/api/swagger/index.html#!/nodes/put_nodes_node_services_service``,
       where ``<rc-visard-ip>`` should be replaced by the actual IP of the |rcvisard|.
    #. The following values are required to fill the request to the REST-API:

        * **node** ``rc_itempick``
        * **service** ``compute_grasps``
        * **service args**
            .. code-block:: json

              {
                "args": {
                  "pose_frame": "camera",
                  "suction_surface_length": 0.02,
                  "suction_surface_width": 0.02
                }
              }

  .. group-tab:: curl (Linux)

    The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
    |rcvisard| (e.g. ``RC_VISARD_IP=10.0.2.90``).

    .. code-block:: bash

      curl -X PUT "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d \
      "{ \
          \"args\": { \
              \"pose_frame\": \"camera\", \
              \"suction_surface_length\": 0.02, \
              \"suction_surface_width\": 0.02 \
          } \
      }"

  .. group-tab:: curl (Windows)
  
    The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
    |rcvisard| (e.g. ``set RC_VISARD_IP=10.0.2.90``) and the *curl* command is in the path.

    .. code-block:: bash

      curl.exe -X PUT "http://%RC_VISARD_IP%/api/v1/nodes/rc_itempick/services/compute_grasps" -H  "accept: application/json" -H  "Content-Type: application/json" -d ^
      "{ ^
          \"args\": { ^
              \"pose_frame\": \"camera\", ^
              \"suction_surface_length\": 0.02, ^
              \"suction_surface_width\": 0.02 ^
          } ^
      }"

  .. group-tab:: PowerShell

    The following command assumes that the variable ``RC_VISARD_IP`` is set to the actual IP of the
    |rcvisard| (e.g. ``$RC_VISARD_IP="10.0.2.90"``).

    .. code-block:: bash

      Invoke-RestMethod "http://$RC_VISARD_IP/api/v1/nodes/rc_itempick/services/compute_grasps" -ContentType 'application/json' -Method Put -Body '
      {
        "args": {
          "pose_frame": "camera",
          "suction_surface_length": 0.02,
          "suction_surface_width": 0.02
        }
      }' | ConvertTo-Json -Depth 6

.. _fig-itempick-getting-started-grasps:
.. figure:: ../images/itempick/getting_started_grasps.png
  :width: 80%
  :align: center
  
  Sample results on the scene shown above: surfaces image on the left and computed grasps on the
  right (including the available suction surface). By default, maximally 5 grasps are returned
  by the ``compute_grasps`` service. The sorting of the grasps takes into account the gravity
  vector, so that objects on top of a pile are grasped first.

.. note::
  
  The |rcvisard| used in this tutorial is a color sensor
  (:numref:`fig-itempick-getting-started-tuning-image`), but |itempick| works only on
  monochrome images, as shown in the result pictures in :numref:`fig-itempick-getting-started-grasps`.


Troublehooting
--------------

* :ref:`There are no grasps detected on the objects<faq-itempick-no-grasps>`
* :ref:`There are too many grasps on one single object<faq-itempick-too-many-grasps>`

.. Next steps
.. ----------